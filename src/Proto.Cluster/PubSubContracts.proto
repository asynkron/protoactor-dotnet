syntax = "proto3";
package cluster.pubsub;
option csharp_namespace = "Proto.Cluster.PubSub";
import "Proto.Actor/Protos.proto";
import "ClusterContracts.proto";

// Identifies a subscriber by either ClusterIdentity or PID
message SubscriberIdentity {
  oneof Identity {
    actor.PID pid = 1;
    cluster.ClusterIdentity cluster_identity = 2;
  }
}

// A list of subscribers
message Subscribers {
  repeated SubscriberIdentity subscribers = 1;
}

// Sent to topic actor to add a subscriber
message SubscribeRequest {
  SubscriberIdentity subscriber = 1;
}

// Subscribe acknowledgement
message SubscribeResponse {}

// Sent to topic actor to remove a subscriber
message UnsubscribeRequest {
  SubscriberIdentity subscriber = 1;
}

// Unsubscribe acknowledgement
message UnsubscribeResponse {}

// Message sent from publisher to topic actor
// See also PubSubBatch
message PubSubBatchTransport {
  repeated string type_names = 1;
  repeated PubSubEnvelope envelopes = 2;
}

// Contains message byte representation and type reference
message PubSubEnvelope {
  int32 type_id = 1;
  bytes message_data = 2;
  int32 serializer_id = 3;
}

// Message sent from topic to delivery actor
message DeliverBatchRequestTransport {
  Subscribers subscribers = 1;
  PubSubBatchTransport batch = 2;
}

// Response from delivery actor to topic
message DeliverBatchResponse {
  repeated SubscriberDeliveryReport invalid_deliveries = 1;
}

// Contains information about a failed delivery
message SubscriberDeliveryReport {
  SubscriberIdentity subscriber = 1;
  DeliveryStatus status = 2;
}

enum DeliveryStatus {
  // Message was put in the queue of the subscriber
  Delivered = 0;
  
  // Message did not reach subscriber, because it was dead
  SubscriberNoLongerReachable = 1;
  
  // Some other problem happened
  OtherError = 127;
}

// Message posted to subscriber's mailbox, that is then unrolled to single messages, and has ability to auto respond
// See also PubSubAutoRespondBatch
message PubSubAutoRespondBatchTransport {
  repeated string type_names = 1;
  repeated PubSubEnvelope envelopes = 2;
}

// Publish ack response
message PublishResponse {}
