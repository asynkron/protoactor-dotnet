name: Build and deploy to Nuget

on:
  push:
    branches:
      - "*"
    tags:
      - "*"
env:
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
  TERM: xterm
  
jobs:
#  test:
#    runs-on: ubuntu-latest
#
#    strategy:
#      matrix:
#        dotnet:
#          - net7.0
#          - net6.0
#          - netcoreapp3.1
#        test:
#          - "tests/Proto.Actor.Tests/*.csproj"
#          - "tests/Proto.Remote.Tests/*.csproj"
#          - "tests/Proto.Persistence.Tests/*.csproj"
#          - "tests/Proto.OpenTelemetry.Tests/*.csproj"
#          - "tests/Proto.Cluster.Tests/*.csproj"
#          - "tests/Proto.Cluster.Identity.Tests/*.csproj"
#          - "tests/Proto.Cluster.PubSub.Tests/*.csproj"
#          - "tests/Proto.Cluster.PartitionIdentity.Tests/*.csproj"
#
#    steps:
#      - uses: actions/checkout@v1
#      - uses: actions/setup-dotnet@v1
#        with:
#          dotnet-version: "7.0.x"
#          include-prerelease: true
#        if: ${{ matrix.dotnet == 'net7.0' }}
#      - uses: actions/setup-dotnet@v1
#        with:
#          dotnet-version: "6.0.x"
#          include-prerelease: true
#        if: ${{ matrix.dotnet == 'net6.0' || matrix.dotnet == 'netcoreapp3.1' }} # sdk 6.0 needed to support c# 10
#      - uses: actions/setup-dotnet@v1
#        with:
#          dotnet-version: "3.1.x"          
#        if: ${{ matrix.dotnet == 'netcoreapp3.1' }}
#
#      - name: Remove global.json  # prevent forcing sdk version
#        run: rm -f global.json
#
#      - name: Run tests ${{ matrix.test }}
#        timeout-minutes: 15
#        run: |
#          dotnet restore ${{ matrix.test }} -p:TargetFrameworks=${{ matrix.dotnet }}
#          dotnet test ${{ matrix.test }} -c Release -f ${{ matrix.dotnet }} --logger GitHubActions --no-restore
#
#  test-redis: # separate job to save time starting redis for all the other jobs
#    runs-on: ubuntu-latest
#
#    services:
#      redis:
#        image: redis
#        ports:
#          - 6379/tcp
#        options: --entrypoint redis-server
#
#    strategy:
#      matrix:
#        dotnet:
#          - net7.0
#          - net6.0
#          - netcoreapp3.1
#        test:
#          - "tests/Proto.Cluster.RedisIdentity.Tests/*.csproj"
#
#    steps:
#      - uses: actions/checkout@v1
#      - uses: actions/setup-dotnet@v1
#        with:
#          dotnet-version: "7.0.x"
#          include-prerelease: true
#        if: ${{ matrix.dotnet == 'net7.0' }}
#      - uses: actions/setup-dotnet@v1
#        with:
#          dotnet-version: "6.0.x"
#          include-prerelease: true
#        if: ${{ matrix.dotnet == 'net6.0' || matrix.dotnet == 'netcoreapp3.1' }} # sdk 6.0 needed to support c# 10
#      - uses: actions/setup-dotnet@v1
#        with:
#          dotnet-version: "3.1.x"
#        if: ${{ matrix.dotnet == 'netcoreapp3.1' }}
#
#      - name: Remove global.json  # prevent forcing sdk version
#        run: rm -f global.json
#
#      - name: Run tests ${{ matrix.test }}
#        timeout-minutes: 15
#        env:
#          ConnectionStrings__Redis: localhost:${{ job.services.redis.ports[6379] }},syncTimeout=10000
#        run: |
#          dotnet restore ${{ matrix.test }} -p:TargetFrameworks=${{ matrix.dotnet }}
#          dotnet test ${{ matrix.test }} -c Release -f ${{ matrix.dotnet }} --logger GitHubActions --no-restore

  test-codegen: # separate job to make it work with netstandard2.0
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        ports:
          - 6379/tcp
        options: --entrypoint redis-server

    strategy:
      matrix:
        dotnet:
          - net6.0
        test:
          - "tests/Proto.Cluster.CodeGen.Tests/*.csproj"

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"
          include-prerelease: true
        if: ${{ matrix.dotnet == 'net6.0' || matrix.dotnet == 'netcoreapp3.1' }} # sdk 6.0 needed to support c# 10

      - name: Remove global.json  # prevent forcing sdk version
        run: rm -f global.json

      - name: Run tests ${{ matrix.test }}
        timeout-minutes: 15
        run: |
          dotnet test ${{ matrix.test }} -c Release --logger GitHubActions



  nuget:
    runs-on: ubuntu-latest
    #needs: [test, test-redis, test-codegen]
    needs: [test-codegen]

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "7.0.x"
          include-prerelease: true
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"   
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "3.1.x"  
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "5.0.x"
          source-url: https://nuget.pkg.github.com/asynkron/index.json          
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}             

      - name: Create and push NuGet package
        run: |
          dotnet pack ProtoActor.sln -c Release -o nuget -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg
          dotnet nuget push nuget/**/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
          # dotnet nuget push nuget/**/*.nupkg --api-key ${{secrets.GITHUB_TOKEN}} --skip-duplicate
          
